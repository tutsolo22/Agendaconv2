# Plan de Desarrollo: Plataforma HexaFac

Este documento describe el plan de desarrollo por fases para la creación de la plataforma de facturación como servicio "HexaFac".

---

### Fase 1: Fundamentos y Configuración de la API

**Objetivo:** Preparar la aplicación para gestionar clientes de API de forma segura.

1.  **Crear Base de Datos para HexaFac:** Generar migraciones para las tablas `hexafac_client_applications`, `hexafac_api_keys` y `hexafac_webhook_configurations`.
2.  **Definir Esquemas de Tablas:** Editar las migraciones para añadir las columnas necesarias (nombres, relaciones, tokens, scopes, etc.).
3.  **Configurar Autenticación:** Asegurar que Laravel Sanctum esté configurado para autenticar las nuevas rutas de la API.

---

### Fase 2: El Corazón de la API - Creación de Facturas (Asíncrona)

**Objetivo:** Implementar la funcionalidad crítica de creación de facturas de forma robusta.

1.  **Crear Ruta y Controlador:** Añadir el endpoint `POST /api/hexafac/v1/facturas` y su controlador `FacturaApiController`.
2.  **Implementar Validación:** Crear un `StoreFacturaApiRequest` para validar el JSON de entrada.
3.  **Crear y Despachar Job:** Crear un `ProcesarFacturaJob` que contenga la lógica de timbrado y despacharlo a la cola para procesamiento en segundo plano.

---

### Fase 3: Panel de Administración de HexaFac (UI)

**Objetivo:** Construir la interfaz web para la autogestión de la plataforma.

1.  **Crear Modelos y Rutas:** Generar los modelos Eloquent para las tablas de la Fase 1 y las rutas web para el panel.
2.  **Implementar Controladores CRUD:** Desarrollar los controladores para gestionar aplicaciones cliente y API Keys.
3.  **Diseñar Vistas:** Crear las vistas con Blade, aplicando la paleta de colores definida.

---

### Fase 4: Implementación de Webhooks

**Objetivo:** Permitir la comunicación asíncrona desde HexaFac hacia las aplicaciones cliente.

1.  **Actualizar el Job de Procesamiento:** Modificar `ProcesarFacturaJob` para que al finalizar, identifique el webhook correspondiente.
2.  **Implementar Notificación:** Usar el cliente HTTP de Laravel para enviar el resultado (éxito o error) al webhook registrado, firmando la petición para mayor seguridad.

---

### Fase 5: Expandir las Funcionalidades de la API

**Objetivo:** Añadir el resto de las capacidades de facturación a la API.

1.  **Implementar Endpoints Adicionales:** Siguiendo el patrón de la Fase 2, crear los endpoints para:
    -   Gestión de Clientes (`GET /clientes`, `POST /clientes`)
    -   Cancelación de Facturas (`POST /facturas/{uuid}/cancelar`)
    -   Consulta de Estatus (`GET /facturas/{uuid}`)
    -   Creación de Notas de Crédito.
    -   Creación de Complementos de Pago.

---

### Fase 6: Despliegue y Extras de Calidad Profesional

**Objetivo:** Finalizar el producto con características que faciliten su adopción y uso.

1.  **Configurar Entorno Sandbox:** Implementar la lógica para un modo de prueba que no genere timbrados reales.
2.  **Generar Documentación OpenAPI:** Instalar y configurar `l5-swagger` para generar documentación interactiva de la API.
3.  **Desarrollar SDK para Node.js:** Crear y publicar un paquete NPM que simplifique la integración con la API de HexaFac.
